{"version":3,"file":"script-blocker.min.js","sources":["../../src/index.js"],"sourcesContent":["// Variables //\nlet blacklistedPatterns = window.SCRIPT_BLOCKER_BLACKLIST\nconst TYPE_ATTRIBUTE = 'javascript/blocked'\n\n// Disables the checks\nlet disableBlocker = false\n// Backup of the blacklisted script nodes\nlet blackListedScripts = []\n\nconst needsToBeBlacklisted = (src, type) => (\n    !disableBlocker &&\n    (!type || type !== TYPE_ATTRIBUTE) &&\n    blacklistedPatterns.some(pattern => pattern.test(src))\n)\n\n/* 1st part - setup a mutation observer to track DOM insertion */\n\nconst observer = new MutationObserver(mutations => {\n    mutations.forEach(({ addedNodes }) => {\n        addedNodes.forEach(node => {\n            // For each added script tag\n            if(node.nodeType === 1 && node.tagName === 'SCRIPT') {\n                const src = node.src || ''\n                const type = node.type\n                // If the src is inside the blacklist\n                if(needsToBeBlacklisted(src, type)) {\n                    // We backup a copy of the script node\n                    blackListedScripts.push(node.cloneNode())\n\n                    // Blocks inline script execution in Safari & Chrome\n                    node.type = TYPE_ATTRIBUTE\n\n                    // Firefox has this additional event which prevents scripts from beeing executed\n                    const beforeScriptExecuteListener = function (event) {\n                        // Prevent only marked scripts from executing\n                        if(node.getAttribute('type') === TYPE_ATTRIBUTE)\n                            event.preventDefault()\n                        node.removeEventListener('beforescriptexecute', beforeScriptExecuteListener)\n                    }\n                    node.addEventListener('beforescriptexecute', beforeScriptExecuteListener)\n\n                    // Remove the node from the DOM\n                    node.parentElement.removeChild(node)\n                }\n            }\n        })\n    })\n})\n\n// Starts the monitoring\nobserver.observe(document.documentElement, {\n    childList: true,\n    subtree: true\n})\n\n/* 2nd part - Monkey patch the createElement method to prevent dynamic scripts from executing */\n\nconst originalDescriptors = Object.getOwnPropertyDescriptors(HTMLScriptElement.prototype)\nconst createElementBackup = document.createElement\n\ndocument.createElement = function(...args) {\n    // If this is not a script tag, bypass\n    if(args[0].toLowerCase() !== 'script')\n        return createElementBackup.bind(document)(...args)\n\n    const scriptElt = createElementBackup.bind(document)(...args)\n\n    // Use the prototype descriptors\n    Object.defineProperties(scriptElt, {\n        'src': {\n            get() {\n                return originalDescriptors.src.get.call(this)\n            },\n            set(value) {\n                if(needsToBeBlacklisted(value, scriptElt.type)) {\n                    scriptElt.type = TYPE_ATTRIBUTE\n                }\n                return originalDescriptors.src.set.call(this, value)\n            }\n        },\n        'type': {\n            set(value) {\n                return originalDescriptors.type.set.call(\n                    this,\n                    needsToBeBlacklisted(scriptElt.src, scriptElt.type) ?\n                        TYPE_ATTRIBUTE :\n                        value\n                )\n            }\n        }\n    })\n\n    // Monkey patch the setAttribute function so that the setter is called instead\n    scriptElt.setAttribute = function(name, value) {\n        if(name === 'type' || name === 'src')\n            scriptElt[name] = value\n        else\n            HTMLScriptElement.protytope.setAttribute.call(scriptElt, name, value)\n    }\n\n    return scriptElt\n}\n\n/* Expose a function that resumes the blacklisted scripts execution. */\n\nconst unblockCheck = function(script) {\n    const src = script.getAttribute('src')\n    return (\n        disableBlocker ||\n        blacklistedPatterns.every(entry => !entry.test(src))\n    )\n}\n\nexport const unblock = function(...scriptUrls) {\n    if(disableBlocker)\n        return\n\n    observer.disconnect()\n\n    if(!scriptUrls || scriptUrls.length < 1) {\n        disableBlocker = true\n    } else {\n        blacklistedPatterns = blacklistedPatterns.filter(pattern =>\n            scriptUrls.every(url => !pattern.test(url))\n        )\n    }\n\n    // Parse existing script tags with a marked type\n    Array.from(document.querySelectorAll(`script[type=\"${TYPE_ATTRIBUTE}\"]`)).forEach(script => {\n        if(unblockCheck(script)) {\n            script.type = 'application/javascript'\n            blackListedScripts.push(script)\n            script.parentElement.removeChild(script)\n        }\n    })\n\n    // Exclude 'whitelisted' scripts from the blacklist and append them to <head>\n    blackListedScripts = blackListedScripts.reduce((acc, script) => {\n        if(unblockCheck(script)) {\n            const scriptNode = document.createElement('script')\n            scriptNode.setAttribute('src', script.src)\n            document.head.appendChild(scriptNode)\n            return acc\n        }\n        return [...acc, script]\n    }, [])\n}"],"names":["blacklistedPatterns","window","SCRIPT_BLOCKER_BLACKLIST","disableBlocker","blackListedScripts","needsToBeBlacklisted","src","type","some","pattern","test","observer","MutationObserver","mutations","forEach","addedNodes","node","nodeType","tagName","push","cloneNode","beforeScriptExecuteListener","event","getAttribute","preventDefault","removeEventListener","addEventListener","parentElement","removeChild","observe","document","documentElement","childList","subtree","originalDescriptors","Object","getOwnPropertyDescriptors","HTMLScriptElement","prototype","createElementBackup","createElement","args","toLowerCase","bind","scriptElt","defineProperties","[object Object]","get","call","this","value","set","setAttribute","name","protytope","unblockCheck","script","every","entry","scriptUrls","disconnect","length","filter","url","Array","from","querySelectorAll","reduce","acc","scriptNode","head","appendChild"],"mappings":"gMACA,IAAIA,EAAsBC,OAAOC,yBAIjC,IAAIC,GAAiB,EAEjBC,KAEJ,MAAMC,EAAuB,CAACC,EAAKC,KAC9BJ,KACCI,GATiB,uBASTA,IACVP,EAAoBQ,KAAKC,GAAWA,EAAQC,KAAKJ,IAK/CK,EAAW,IAAIC,iBAAiBC,IAClCA,EAAUC,QAAQ,EAAGC,WAAAA,MACjBA,EAAWD,QAAQE,IAEf,GAAqB,IAAlBA,EAAKC,UAAmC,WAAjBD,EAAKE,QAAsB,CACjD,MAAMZ,EAAMU,EAAKV,KAAO,GAClBC,EAAOS,EAAKT,KAElB,GAAGF,EAAqBC,EAAKC,GAAO,CAEhCH,EAAmBe,KAAKH,EAAKI,aAG7BJ,EAAKT,KA5BF,qBA+BH,MAAMc,EAA8B,SAAUC,GA/B3C,uBAiCIN,EAAKO,aAAa,SACjBD,EAAME,iBACVR,EAAKS,oBAAoB,sBAAuBJ,IAEpDL,EAAKU,iBAAiB,sBAAuBL,GAG7CL,EAAKW,cAAcC,YAAYZ,WAQnDL,EAASkB,QAAQC,SAASC,iBACtBC,WAAW,EACXC,SAAS,IAKb,MAAMC,EAAsBC,OAAOC,0BAA0BC,kBAAkBC,WACzEC,EAAsBT,SAASU,cAErCV,SAASU,cAAgB,YAAYC,GAEjC,GAA6B,WAA1BA,EAAK,GAAGC,cACP,OAAOH,EAAoBI,KAAKb,SAAzBS,IAAsCE,GAEjD,MAAMG,EAAYL,EAAoBI,KAAKb,SAAzBS,IAAsCE,GAmCxD,OAhCAN,OAAOU,iBAAiBD,GACpBtC,KACIwC,MACI,OAAOZ,EAAoB5B,IAAIyC,IAAIC,KAAKC,OAE5CH,IAAII,GAIA,OAHG7C,EAAqB6C,EAAON,EAAUrC,QACrCqC,EAAUrC,KAzEP,sBA2EA2B,EAAoB5B,IAAI6C,IAAIH,KAAKC,KAAMC,KAGtD3C,MACIuC,IAAII,GACA,OAAOhB,EAAoB3B,KAAK4C,IAAIH,KAChCC,KACA5C,EAAqBuC,EAAUtC,IAAKsC,EAAUrC,MAlF3C,qBAoFC2C,OAOpBN,EAAUQ,aAAe,SAASC,EAAMH,GACxB,SAATG,GAA4B,QAATA,EAClBT,EAAUS,GAAQH,EAElBb,kBAAkBiB,UAAUF,aAAaJ,KAAKJ,EAAWS,EAAMH,IAGhEN,GAKX,MAAMW,EAAe,SAASC,GAC1B,MAAMlD,EAAMkD,EAAOjC,aAAa,OAChC,OACIpB,GACAH,EAAoByD,MAAMC,IAAUA,EAAMhD,KAAKJ,eAIhC,YAAYqD,GAC5BxD,IAGHQ,EAASiD,cAELD,GAAcA,EAAWE,OAAS,EAClC1D,GAAiB,EAEjBH,EAAsBA,EAAoB8D,OAAOrD,GAC7CkD,EAAWF,MAAMM,IAAQtD,EAAQC,KAAKqD,KAK9CC,MAAMC,KAAKnC,SAASoC,iBAAiB,sCAAqCpD,QAAQ0C,IAC3ED,EAAaC,KACZA,EAAOjD,KAAO,yBACdH,EAAmBe,KAAKqC,GACxBA,EAAO7B,cAAcC,YAAY4B,MAKzCpD,EAAqBA,EAAmB+D,OAAO,CAACC,EAAKZ,KACjD,GAAGD,EAAaC,GAAS,CACrB,MAAMa,EAAavC,SAASU,cAAc,UAG1C,OAFA6B,EAAWjB,aAAa,MAAOI,EAAOlD,KACtCwB,SAASwC,KAAKC,YAAYF,GACnBD,EAEX,UAAWA,EAAKZ"}