{"version":3,"file":"yett.min.js","sources":["../../src/index.js"],"sourcesContent":["// Variables //\nlet blacklistedPatterns = window.YETT_BLACKLIST\nconst TYPE_ATTRIBUTE = 'javascript/blocked'\n\n// Disables the checks\nlet disableBlocker = false\n// Backup of the blacklisted script nodes\nlet blackListedScripts = []\n\nconst needsToBeBlacklisted = (src, type) => (\n    !disableBlocker &&\n    (!type || type !== TYPE_ATTRIBUTE) &&\n    blacklistedPatterns.some(pattern => pattern.test(src))\n)\n\n/* 1st part - setup a mutation observer to track DOM insertion */\n\nconst observer = new MutationObserver(mutations => {\n    mutations.forEach(({ addedNodes }) => {\n        for(let i = 0; i < addedNodes.length; i++) {\n            const node = addedNodes[i]\n            // For each added script tag\n            if(node.nodeType === 1 && node.tagName === 'SCRIPT') {\n                const src = node.src || ''\n                const type = node.type\n                // If the src is inside the blacklist\n                if(needsToBeBlacklisted(src, type)) {\n                    // We backup a copy of the script node\n                    blackListedScripts.push(node.cloneNode())\n\n                    // Blocks inline script execution in Safari & Chrome\n                    node.type = TYPE_ATTRIBUTE\n\n                    // Firefox has this additional event which prevents scripts from beeing executed\n                    const beforeScriptExecuteListener = function (event) {\n                        // Prevent only marked scripts from executing\n                        if(node.getAttribute('type') === TYPE_ATTRIBUTE)\n                            event.preventDefault()\n                        node.removeEventListener('beforescriptexecute', beforeScriptExecuteListener)\n                    }\n                    node.addEventListener('beforescriptexecute', beforeScriptExecuteListener)\n\n                    // Remove the node from the DOM\n                    node.parentElement.removeChild(node)\n                }\n            }\n        }\n    })\n})\n\n// Starts the monitoring\nobserver.observe(document.documentElement, {\n    childList: true,\n    subtree: true\n})\n\n/* 2nd part - Monkey patch the createElement method to prevent dynamic scripts from executing */\n\nconst originalDescriptors = {\n    src: Object.getOwnPropertyDescriptor(HTMLScriptElement.prototype, 'src'),\n    type: Object.getOwnPropertyDescriptor(HTMLScriptElement.prototype, 'type')\n}\nconst createElementBackup = document.createElement\n\ndocument.createElement = function(...args) {\n    // If this is not a script tag, bypass\n    if(args[0].toLowerCase() !== 'script')\n        return createElementBackup.bind(document)(...args)\n\n    const scriptElt = createElementBackup.bind(document)(...args)\n\n    // Use the prototype descriptors\n    Object.defineProperties(scriptElt, {\n        'src': {\n            get() {\n                return originalDescriptors.src.get.call(this)\n            },\n            set(value) {\n                if(needsToBeBlacklisted(value, scriptElt.type)) {\n                    scriptElt.type = TYPE_ATTRIBUTE\n                }\n                return originalDescriptors.src.set.call(this, value)\n            }\n        },\n        'type': {\n            set(value) {\n                return originalDescriptors.type.set.call(\n                    this,\n                    needsToBeBlacklisted(scriptElt.src, scriptElt.type) ?\n                        TYPE_ATTRIBUTE :\n                        value\n                )\n            }\n        }\n    })\n\n    // Monkey patch the setAttribute function so that the setter is called instead\n    scriptElt.setAttribute = function(name, value) {\n        if(name === 'type' || name === 'src')\n            scriptElt[name] = value\n        else\n            HTMLScriptElement.prototype.setAttribute.call(scriptElt, name, value)\n    }\n\n    return scriptElt\n}\n\n/* Expose a function that resumes the blacklisted scripts execution. */\n\nconst unblockCheck = function(script) {\n    const src = script.getAttribute('src')\n    return (\n        disableBlocker ||\n        blacklistedPatterns.every(entry => !entry.test(src))\n    )\n}\n\nexport const unblock = function(...scriptUrls) {\n    if(disableBlocker)\n        return\n\n    observer.disconnect()\n\n    if(!scriptUrls || scriptUrls.length < 1) {\n        disableBlocker = true\n    } else {\n        blacklistedPatterns = blacklistedPatterns.filter(pattern =>\n            scriptUrls.every(url => !pattern.test(url))\n        )\n    }\n\n    // Parse existing script tags with a marked type\n    const tags = document.querySelectorAll(`script[type=\"${TYPE_ATTRIBUTE}\"]`)\n    for(let i = 0; i < tags.length; i++) {\n        const script = tags[i]\n        if(unblockCheck(script)) {\n            script.type = 'application/javascript'\n            blackListedScripts.push(script)\n            script.parentElement.removeChild(script)\n        }\n    }\n\n    // Exclude 'whitelisted' scripts from the blacklist and append them to <head>\n    blackListedScripts = blackListedScripts.reduce((acc, script) => {\n        if(unblockCheck(script)) {\n            const scriptNode = document.createElement('script')\n            scriptNode.setAttribute('src', script.src)\n            scriptNode.setAttribute('type', 'application/javascript')\n            document.head.appendChild(scriptNode)\n            return acc\n        }\n        return [...acc, script]\n    }, [])\n}\n"],"names":["blacklistedPatterns","window","YETT_BLACKLIST","disableBlocker","blackListedScripts","needsToBeBlacklisted","src","type","some","pattern","test","observer","MutationObserver","forEach","addedNodes","i","node","nodeType","tagName","push","cloneNode","addEventListener","beforeScriptExecuteListener","event","getAttribute","preventDefault","removeEventListener","parentElement","removeChild","length","observe","document","documentElement","originalDescriptors","Object","getOwnPropertyDescriptor","HTMLScriptElement","prototype","createElementBackup","createElement","args","toLowerCase","bind","scriptElt","defineProperties","get","call","this","value","set","setAttribute","name","unblockCheck","script","every","entry","scriptUrls","disconnect","filter","url","tags","querySelectorAll","reduce","acc","scriptNode","head","appendChild"],"mappings":"2LACIA,EAAsBC,OAAOC,eAI7BC,GAAiB,EAEjBC,KAEEC,EAAuB,SAACC,EAAKC,UAC9BJ,KACCI,GATiB,uBASTA,IACVP,EAAoBQ,KAAK,mBAAWC,EAAQC,KAAKJ,MAK/CK,EAAW,IAAIC,iBAAiB,cACxBC,QAAQ,oBAAGC,IAAAA,sBACTC,OACEC,EAAOF,EAAWC,MAEH,IAAlBC,EAAKC,UAAmC,WAAjBD,EAAKE,QAAsB,KAC3CZ,EAAMU,EAAKV,KAAO,GAClBC,EAAOS,EAAKT,QAEfF,EAAqBC,EAAKC,GAAO,GAEbY,KAAKH,EAAKI,eAGxBb,KA7BF,uBAsCEc,iBAAiB,sBANc,SAA9BC,EAAwCC,GAhC3C,uBAkCIP,EAAKQ,aAAa,SACjBD,EAAME,mBACLC,oBAAoB,sBAAuBJ,OAK/CK,cAAcC,YAAYZ,MAxBnCD,EAAI,EAAGA,EAAID,EAAWe,OAAQd,MAA9BA,OAgChBJ,EAASmB,QAAQC,SAASC,4BACX,WACF,IAKb,IAAMC,OACGC,OAAOC,yBAAyBC,kBAAkBC,UAAW,YAC5DH,OAAOC,yBAAyBC,kBAAkBC,UAAW,SAEjEC,EAAsBP,SAASQ,cAErCR,SAASQ,cAAgB,sCAAYC,4CAEJ,WAA1BA,EAAK,GAAGC,cACP,OAAOH,EAAoBI,KAAKX,uBAAaS,OAE3CG,EAAYL,EAAoBI,KAAKX,uBAAaS,iBAGjDI,iBAAiBD,8BAGLV,EAAoB3B,IAAIuC,IAAIC,KAAKC,oBAExCC,UACG3C,EAAqB2C,EAAOL,EAAUpC,UAC3BA,KA7EP,sBA+EA0B,EAAoB3B,IAAI2C,IAAIH,KAAKC,KAAMC,wBAI9CA,UACOf,EAAoB1B,KAAK0C,IAAIH,KAChCC,KACA1C,EAAqBsC,EAAUrC,IAAKqC,EAAUpC,MAtF3C,qBAwFCyC,SAOVE,aAAe,SAASC,EAAMH,GACxB,SAATG,GAA4B,QAATA,EAClBR,EAAUQ,GAAQH,EAElBZ,kBAAkBC,UAAUa,aAAaJ,KAAKH,EAAWQ,EAAMH,IAGhEL,GAKX,IAAMS,EAAe,SAASC,OACpB/C,EAAM+C,EAAO7B,aAAa,cAE5BrB,GACAH,EAAoBsD,MAAM,mBAAUC,EAAM7C,KAAKJ,gBAIhC,sCAAYkD,6CAC5BrD,KAGMsD,cAELD,GAAcA,EAAW3B,OAAS,KACjB,IAEK7B,EAAoB0D,OAAO,mBAC7CF,EAAWF,MAAM,mBAAQ7C,EAAQC,KAAKiD,eAKxCC,EAAO7B,SAAS8B,sDACd9C,EAAI,EAAGA,EAAI6C,EAAK/B,OAAQd,IAAK,KAC3BsC,EAASO,EAAK7C,GACjBqC,EAAaC,OACL9C,KAAO,2BACKY,KAAKkC,KACjB1B,cAAcC,YAAYyB,MAKpBjD,EAAmB0D,OAAO,SAACC,EAAKV,MAC9CD,EAAaC,GAAS,KACfW,EAAajC,SAASQ,cAAc,mBAC/BW,aAAa,MAAOG,EAAO/C,OAC3B4C,aAAa,OAAQ,mCACvBe,KAAKC,YAAYF,GACnBD,yIAEAA,IAAKV"}